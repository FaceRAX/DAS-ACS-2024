{
	"info": {
		"_postman_id": "876d447c-0d5d-4796-a719-f1a805d05dac",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20761964"
	},
	"item": [
		{
			"name": "Create user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"alice\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/players",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"players"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/players",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"players"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Game",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"player1Id\": \"8c036037-9821-489d-901f-b320f26993fd\", \"player2Id\": \"ae2ab3b5-d472-46d5-a228-dd4787910a24\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Game",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"start"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a Move to the Game",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"uci\": \"e2e4\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/moves",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"moves"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get moves",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/moves",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"moves"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get players",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:808/players",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"players"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get games",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Data export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/data/export",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"data",
						"export"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Data import",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"players\": [\r\n        {\r\n            \"id\": \"8c036037-9821-489d-901f-b320f26993fd\",\r\n            \"username\": \"alice\",\r\n            \"registrationDate\": \"05-02-2025 00:56:01\",\r\n            \"wins\": 0,\r\n            \"losses\": 0,\r\n            \"draws\": 0,\r\n            \"winLossRatio\": 0.0\r\n        },\r\n        {\r\n            \"id\": \"ae2ab3b5-d472-46d5-a228-dd4787910a24\",\r\n            \"username\": \"john\",\r\n            \"registrationDate\": \"05-02-2025 00:56:12\",\r\n            \"wins\": 0,\r\n            \"losses\": 0,\r\n            \"draws\": 0,\r\n            \"winLossRatio\": 0.0\r\n        }\r\n    ],\r\n    \"games\": [\r\n        {\r\n            \"id\": \"2c87d254-f912-424b-bbce-a1448f72b334\",\r\n            \"playerWhite\": {\r\n                \"id\": \"8c036037-9821-489d-901f-b320f26993fd\",\r\n                \"username\": \"alice\",\r\n                \"registrationDate\": \"05-02-2025 00:56:01\",\r\n                \"wins\": 0,\r\n                \"losses\": 0,\r\n                \"draws\": 0,\r\n                \"winLossRatio\": 0.0\r\n            },\r\n            \"playerBlack\": {\r\n                \"id\": \"ae2ab3b5-d472-46d5-a228-dd4787910a24\",\r\n                \"username\": \"john\",\r\n                \"registrationDate\": \"05-02-2025 00:56:12\",\r\n                \"wins\": 0,\r\n                \"losses\": 0,\r\n                \"draws\": 0,\r\n                \"winLossRatio\": 0.0\r\n            },\r\n            \"moves\": [\r\n                {\r\n                \"id\": \"2c87d254-f912-424b-bbce-a1448f72b334\",\r\n                \"uci\": \"e2e4\",\r\n                \"player\": {\r\n                    \"id\": \"8c036037-9821-489d-901f-b320f26993fd\",\r\n                    \"username\": \"alice\",\r\n                    \"registrationDate\": \"05-02-2025 00:56:01\",\r\n                    \"wins\": 0,\r\n                    \"losses\": 0,\r\n                    \"draws\": 0,\r\n                    \"winLossRatio\": 0.0\r\n                },\r\n                \"timestamp\": \"05-02-2025 00:56:12\"\r\n            }\r\n            ],\r\n            \"currentFEN\": \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\r\n            \"state\": {\r\n                \"stateName\": \"IN_PROGRESS\"\r\n            },\r\n            \"startTime\": \"05-02-2025 00:56:30\",\r\n            \"endTime\": null,\r\n            \"currentPlayerTurn\": {\r\n                \"id\": \"ae2ab3b5-d472-46d5-a228-dd4787910a24\",\r\n                \"username\": \"john\",\r\n                \"registrationDate\": \"05-02-2025 00:56:12\",\r\n                \"wins\": 0,\r\n                \"losses\": 0,\r\n                \"draws\": 0,\r\n                \"winLossRatio\": 0.0\r\n            }\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/data/import",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"data",
						"import"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Begin analysis",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fen\":\"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\\n\",\r\n    \"depth\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/analysis",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"analysis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Analysis Result",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:808/analysis/eabed717-521e-4d9d-bb2c-cd16d7539737",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"analysis",
						"eabed717-521e-4d9d-bb2c-cd16d7539737"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add another Move to the Game",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"uci\": \"c7c5\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/moves",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"moves"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get moves Copy",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/moves",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"moves"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getHTML",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/board",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"board"
					]
				}
			},
			"response": []
		},
		{
			"name": "UploadPGN",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[Event \"F/S Return Match\"]\r\n[Site \"Belgrade, Serbia JUG\"]\r\n[Date \"1992.11.04\"]\r\n[Round \"29\"]\r\n[White \"Fischer, Robert J.\"]\r\n[Black \"Spassky, Boris V.\"]\r\n[Result \"1/2-1/2\"]\r\n\r\n1.e4 e5 2.Nf3 Nc6 3.Bb5 3...a6 4.Ba4 Nf6 5.O-O Be7 6.Re1 b5 7.Bb3 d6 8.c3 O-O 9.h3 Nb8 10.d4 Nbd7\r\n11.c4 c6 12.cxb5 axb5 13.Nc3 Bb7 14.Bg5 b4 15.Nb1 h6 16.Bh4 c5 17.dxe5 Nxe4 \r\n18.Bxe7 Qxe7 19.exd6 Qf6 20.Nbd2 Nxd6 21.Nc4 Nxc4 22.Bxc4 Nb6\r\n23.Ne5 Rae8 24.Bxf7+ Rxf7 25.Nxf7 Rxe1+ 26.Qxe1 Kxf7 27.Qe3 Qg5 28.Qxg5\r\nhxg5 29.b3 Ke6 30.a3 Kd6 31.axb4 cxb4 32.Ra5 Nd5 33.f3 Bc8 34.Kf2 Bf5\r\n35.Ra7 g6 36.Ra6+ Kc5 37.Ke1 Nf4 38.g3 Nxh3 39.Kd2 Kb5 40.Rd6 Kc5 41.Ra6\r\nNf2 42.g4 Bd3 43.Re6 1/2-1/2",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:808/games/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get current FEN",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:808/games/2c87d254-f912-424b-bbce-a1448f72b334/position",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"games",
						"2c87d254-f912-424b-bbce-a1448f72b334",
						"position"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get player",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:808/players/8c036037-9821-489d-901f-b320f26993fd",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"players",
						"8c036037-9821-489d-901f-b320f26993fd"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get player stats",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:808/players/8c036037-9821-489d-901f-b320f26993fd/statistics",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "808",
					"path": [
						"players",
						"8c036037-9821-489d-901f-b320f26993fd",
						"statistics"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}